plugins {
    id("net.minecraftforge.gradle") version("${fg_plugin_version}")
    id("org.spongepowered.mixin") version("${mixin_plugin_version}")
    id("eclipse")
    id("idea")
    id("maven-publish")
    id("com.github.johnrengelman.shadow") version("${shadow_plugin_version}")
    id("org.parchmentmc.librarian.forgegradle") version("${librarian_plugin_version}")
}

version = "${mod_version}-1.20.1"
group = 'xyz.nikgub.pyromancer'
archivesBaseName = 'pyromancer'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${mod_id}.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        client {
            args '--username', "nikgub"
            property 'forge.enabledGameTestNamespaces',  mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces',  mod_id
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces',  mod_id
        }

        data {
            args '--mod',  mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    ext.refMap = "main.refmap.json"
}

mixin {
    add sourceSets.main, "pyromancer.refmap.json"
    config "pyromancer.mixins.json"
    debug.export = true
}

repositories {
    //maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven {
        name = "CurseMaven Maven"
        url = "https://www.cursemaven.com"
    }
    //maven { url 'https://maven.blamejared.com' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("curse.maven:incandescent_lib-971520:5629137")
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-3.0.1.7")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            mappings_channel: mappings_channel, mappings_version: mappings_version,
            incandescent_lib_range: incandescent_lib_range, terrablender_version_range: terrablender_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : mod_name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'		  	  : "${mod_id}.mixins.json"
        ])
    }
    finalizedBy("reobfJar")
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    finalizedBy("reobfShadowJar")
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
